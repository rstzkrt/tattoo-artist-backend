openapi: 3.0.3
info:
  title: user-api-contract
  description: user-api-contract
  version: 1.0.0
paths:
  /users:
    get:
      operationId: getAllUsers
      description: get users
      parameters:
        - in: query
          name: firstName
          description: user firstname
          required: false
          schema:
            type: string
        - in: query
          name: lastName
          description: user lastname
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# every user will be created as client first ,so we pass client request dto to request body
    post:
      operationId: createUser
      description: add user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientReqDto'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      operationId: getUserById
      description: get user
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: deleteUser
      description: get user
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      operationId: updateUser
      description: update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequestDto'
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: createArtistAccount
      description: create artist page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TattooArtistAccReqDto'
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/tattoo-works/{post_id}/favorites:
    put:
      operationId: favoriteTattooWork
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: post_id
          description: tattooWork post id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: unfavoriteTattooWork
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: post_id
          description: tattooWork post id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/tattoo-artists/{artist_id}/favorites:
    put:
      operationId: favoriteTattooArtist
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: artist_id
          description: artist id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: unfavoriteTattooArtist
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: artist_id
          description: artist id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/tattoo-works/{post_id}/likes:
    put:
      operationId: likeTattooWork
      description: like
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: post_id
          description: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: dislikeTattooWork
      description: dislike
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: post_id
          description: artist id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:

    UserUpdateRequestDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        birthDate:
          type: string
          format: date
        avatarUrl:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        workDays:
          type: array
          items:
            $ref: '#/components/schemas/WorkingDays'
        street:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
        postalCode:
          type: string
        otherInformation:
          type: string

    ClientReqDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        avatarUrl:
          type: string
        birthDate:
          type: string
          format: date
        email:
          type: string

    TattooArtistAccReqDto:
      type: object
      properties:
        phoneNumber:
          type: string
        workDays:
          type: array
          items:
            $ref: '#/components/schemas/WorkingDays'
        street:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
        postalCode:
          type: string
        otherInformation:
          type: string

    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        uid:
          type: string
          description: id for firebase auth
        firstName:
          type: string
        lastName:
          type: string
        avatarUrl:
          type: string
        birthDate:
          type: string
          format: date
        email:
          type: string
        hasArtistPage:
          type: boolean
        workDays:
          type: array
          items:
            $ref: '#/components/schemas/WorkingDays'
        averageRating:
          type: number
        minTattooWorkPrice:
          type: number
        minTattooWorkPriceCurrency:
          $ref: './tattoo-work-contract.yaml/#/components/schemas/Currency'
        maxTattooWorkPrice:
          type: number
        maxTattooWorkPriceCurrency:
          $ref: './tattoo-work-contract.yaml/#/components/schemas/Currency'
        phoneNumber:
          type: string
        street:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
        postalCode:
          type: string
        otherInformation:
          type: string
        favoriteArtistIds:
          type: array
          items:
            type: string
            format: uuid
        favoriteTattooWorkIds:
          type: array
          items:
            type: string
            format: uuid
        commentIds:
          type: array
          items:
            type: string
            format: uuid
        tattooWorkIds:
          type: array
          items:
            type: string
            format: uuid

    WorkingDays:
      enum:
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
        - SUNDAY

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
