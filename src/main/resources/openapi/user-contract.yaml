openapi: 3.0.3
info:
  title: user-api-contract
  description: user-api-contract
  version: 1.0.0
servers:
  - url: /
paths:
  /users:
    get:
      operationId: getAllUsers
      description: get users
      parameters:
        - in: query
          name: firstName
          description: user firstname
          required: false
          schema:
            type: string
        - in: query
          name: lastName
          description: user lastname
          required: false
          schema:
            type: string
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: size
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/UserResponseDtoPageable'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createUser
      description: add user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientReqDto'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/search:
    get:
      operationId: searchUsers
      description: search
      parameters:
        - in: query
          name: query
          description: query keyword
          required: true
          schema:
            type: string
        - in: query
          name: city
          description: query keyword
          required: false
          schema:
            type: string
        - in: query
          name: country
          description: query keyword
          required: false
          schema:
            type: string
        - in: query
          name: isTattooArtist
          description: query keyword
          required: false
          schema:
            type: boolean
        - in: query
          name: averageRating
          description: query keyword
          required: false
          schema:
            type: number
        - in: query
          name: languages
          description: query languages
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: gender
          description: query gender
          required: false
          schema:
            $ref: "#/components/schemas/Gender"
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: size
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDtoPageable'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      operationId: getUserById
      description: get user
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteUserById
      description: delete user
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me:
    get:
      operationId: getAuthenticatedUser
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteUser
      description: delete user
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: updateUser
      description: update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequestDto'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: createArtistAccount
      description: create artist page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TattooArtistAccReqDto'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me/tattooworks:
    get:
      operationId: getTattooWorks
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TattooWorksResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/tattoo-works/{post_id}/favorites:
    put:
      operationId: favoriteTattooWork
      parameters:
        - in: path
          name: post_id
          description: tattooWork post id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: unfavoriteTattooWork
      parameters:
        - in: path
          name: post_id
          description: tattooWork post id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/tattoo-artists/{artist_id}/favorites:
    put:
      operationId: favoriteTattooArtist
      parameters:
        - in: path
          name: artist_id
          description: artist id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: unfavoriteTattooArtist
      parameters:
        - in: path
          name: artist_id
          description: artist id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me/tattoo-works/{post_id}/likes:
    put:
      operationId: likeTattooWork
      description: like
      parameters:
        - in: path
          name: post_id
          description: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: dislikeTattooWork
      description: dislike
      parameters:
        - in: path
          name: post_id
          description: artist id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: no content
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}/price-interval:
    get:
      operationId: userPriceInterval
      description: price interval
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TattooArtistPriceInterval'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me/favorite-tattoo-works:
    get:
      operationId: getFavoriteTattooWorks
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TattooWorksResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me/favorite-tattoo-artist:
    get:
      operationId: getFavoriteTattooArtists
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
        default:
          description: error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:

    UserUpdateRequestDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        birthDate:
          type: string
          format: date
        avatarUrl:
          type: string
        phoneNumber:
          type: string
        tattooStyles:
          type: array
          items:
            $ref: '#/components/schemas/TattooStyle'
        workDays:
          type: array
          items:
            $ref: '#/components/schemas/WorkingDays'
        street:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
        postalCode:
          type: string
        otherInformation:
          type: string
        careerDescription:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'

    ClientReqDto:
      type: object
      properties:
        uid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        avatarUrl:
          type: string
        email:
          type: string


    TattooWorksResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        clientId:
          type: string
          format: uuid
        tattooStyle:
          $ref: '#/components/schemas/TattooStyle'
        price:
          type: number
        commentId:
          type: string
          format: uuid
        currency:
          $ref: '#/components/schemas/Currency'
        dislike_number:
          type: integer
        like_number:
          type: integer
        coverPhoto:
          type: string
        photos:
          type: array
          items:
            type: string
        madeBy:
          $ref: '#/components/schemas/MadeByInfo'


    TattooArtistAccReqDto:
      type: object
      properties:
        dateOfBirth:
          type: string
          format: date
        phoneNumber:
          type: string
        tattooStyles:
          type: array
          items:
            $ref: '#/components/schemas/TattooStyle'
        workDays:
          type: array
          items:
            $ref: '#/components/schemas/WorkingDays'
        street:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
        postalCode:
          type: string
        otherInformation:
          type: string
        careerDescription:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'


    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        uid:
          type: string
          description: id for firebase auth
        firstName:
          type: string
        lastName:
          type: string
        avatarUrl:
          type: string
        birthDate:
          type: string
          format: date
        email:
          type: string
        hasArtistPage:
          type: boolean
        tattooStyles:
          type: array
          items:
            $ref: '#/components/schemas/TattooStyle'
        workDays:
          type: array
          items:
            $ref: '#/components/schemas/WorkingDays'
        averageRating:
          type: number
        phoneNumber:
          type: string
        street:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
        postalCode:
          type: string
        otherInformation:
          type: string
        favoriteArtistIds:
          type: array
          items:
            type: string
            format: uuid
        favoriteTattooWorkIds:
          type: array
          items:
            type: string
            format: uuid
        commentIds:
          type: array
          items:
            type: string
            format: uuid
        tattooWorkIds:
          type: array
          items:
            type: string
            format: uuid
        careerDescription:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
        tattooWorkReports:
          type: array
          items:
            type: string
            format: uuid
        userReports:
          type: array
          items:
            type: string
            format: uuid

    TattooStyle:
      enum:
        - OLD_SCHOOL
        - TRIBAL
        - ASIAN_ORIENTAL
        - SCRIPT
        - WATERCOLOUR
        - PORTRAITS
        - NEW_SCHOOL
        - BLACK_AND_GREY
        - BIOMECHANICAL
        - REALISTIC
        - DOT_WORK

    Gender:
      enum:
        - MALE
        - FEMALE

    UserResponseDtoPageable:
      properties:
        totalElements:
          type: integer
        tattooArtists:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseDto'

    TattooArtistPriceInterval:
      type: object
      properties:
        maxTattooWorkPrice:
          type: number
        minTattooWorkPrice:
          type: number
        minTattooWorkPriceCurrency:
          $ref: './tattoo-work-contract.yaml/#/components/schemas/Currency'
        maxTattooWorkPriceCurrency:
          $ref: './tattoo-work-contract.yaml/#/components/schemas/Currency'

    WorkingDays:
      enum:
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
        - SUNDAY

    UserDocumentDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
        avatarUrl:
          type: string
        languages:
          type: array
          items:
            $ref: "#/components/schemas/Language"

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    Language:
      enum:
        - AFAR
        - ABKHAZ
        - AVESTAN
        - AFRIKAANS
        - AKAN
        - AMHARIC
        - ARAGONESE
        - ARABIC
        - ASSAMESE
        - AVARIC
        - AYMARA
        - AZERBAIJANI
        - BASHKIR
        - BELARUSIAN
        - BULGARIAN
        - BIHARI
        - BISLAMA
        - BAMBARA
        - BENGALI
        - TIBETAN
        - BRETON
        - BOSNIAN
        - CATALAN
        - CHECHEN
        - CHAMORRO
        - CORSICAN
        - CREE
        - CZECH
        - OLD CHURCH SLAVONIC
        - CHUVASH
        - WELSH
        - DANISH
        - GERMAN
        - DIVEHI
        - DZONGKHA
        - EWE
        - GREEK
        - ENGLISH
        - ESPERANTO
        - SPANISH
        - ESTONIAN
        - BASQUE
        - PERSIAN
        - FULA
        - FINNISH
        - FIJIAN
        - FAROESE
        - FRENCH
        - WESTERN FRISIAN
        - IRISH
        - SCOTTISH GAELIC
        - GALICIAN
        - GUJARATI
        - MANX
        - HAUSA
        - HEBREW
        - HINDI
        - HIRI MOTU
        - CROATIAN
        - HAITIAN
        - HUNGARIAN
        - ARMENIAN
        - HERERO
        - INTERLINGUA
        - INDONESIAN
        - INTERLINGUE
        - IGBO
        - NUOSU
        - INUPIAQ
        - IDO
        - ICELANDIC
        - ITALIAN
        - INUKTITUT
        - JAPANESE
        - JAVANESE
        - GEORGIAN
        - KONGO
        - KIKUYU
        - KWANYAMA
        - KAZAKH
        - KALAALLISUT
        - KHMER
        - KANNADA
        - KOREAN
        - KANURI
        - KASHMIRI
        - KURDISH
        - KOMI
        - CORNISH
        - KYRGYZ
        - LATIN
        - LUXEMBOURGISH
        - GANDA
        - LIMBURGISH
        - LINGALA
        - LAO
        - LITHUANIAN
        - LUBA-KATANGA
        - LATVIAN
        - MALAGASY
        - MARSHALLESE
        - MĀORI
        - MACEDONIAN
        - MALAYALAM
        - MONGOLIAN
        - MARATHI
        - MALAY
        - MALTESE
        - BURMESE
        - NAURU
        - NORWEGIAN BOKMÅL
        - NORTHERN NDEBELE
        - NEPALI
        - NDONGA
        - DUTCH
        - NORWEGIAN NYNORSK
        - NORWEGIAN
        - SOUTHERN NDEBELE
        - NAVAJO
        - CHICHEWA
        - OCCITAN
        - OJIBWE
        - OROMO
        - ORIYA
        - OSSETIAN
        - PANJABI
        - PĀLI
        - POLISH
        - PASHTO
        - PORTUGUESE
        - QUECHUA
        - ROMANSH
        - KIRUNDI
        - ROMANIAN
        - RUSSIAN
        - KINYARWANDA
        - SANSKRIT
        - SARDINIAN
        - SINDHI
        - NORTHERN SAMI
        - SANGO
        - SINHALA
        - SLOVAK
        - SLOVENIAN
        - SHONA
        - SOMALI
        - ALBANIAN
        - SERBIAN
        - SWATI
        - SOUTHERN SOTHO
        - SUNDANESE
        - SWEDISH
        - SWAHILI
        - TAMIL
        - TELUGU
        - TAJIK
        - THAI
        - TIGRINYA
        - TURKMEN
        - TAGALOG
        - TSWANA
        - TONGA
        - TURKISH
        - TSONGA
        - TATAR
        - TWI
        - TAHITIAN
        - UYGHUR
        - UKRAINIAN
        - URDU
        - UZBEK
        - VENDA
        - VIETNAMESE
        - VOLAPÜK
        - WALLOON
        - WOLOF
        - XHOSA
        - YIDDISH
        - YORUBA
        - ZHUANG
        - CHINESE
        - ZULU

